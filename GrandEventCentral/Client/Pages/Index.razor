@page "/"
@inject IJSRuntime js
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<LoginLinks></LoginLinks>
<div>
    <h3>Upcoming events</h3>
    @if (myEvents == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Content</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var myEvent in myEvents)
                {
                    <tr>
                        <td>
                            <a href="/Events/Edit/@myEvent.Id">Edit</a> | 
                            <a href="/Events/Details/@myEvent.Id">Details</a> |
                            <a href="#" @onclick="@(() => DeleteEvent(myEvent))">Delete</a> | 
                            Join
                        </td>
                        <td>
                            Event: <a href="@myEvent.EventUrlFb">@myEvent.Title</a>  by @myEvent.HostName <br />
                            @myEvent.Description <br />
                            Location: @myEvent.FullAddress
                        </td>
                        <td>@myEvent.Date</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<button class="btn btn-primary" @onclick="CreateEventNew">Add your own Event!</button>

@code {
    private List<PublicEvent> myEvents;

    private void CreateEventNew(MouseEventArgs e)
    {
        Navigation.NavigateTo("/events/create");
    }

    private async Task DeleteEvent(PublicEvent myPublicEvent)
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(Navigation.BaseUri);
        var body = Newtonsoft.Json.JsonConvert.SerializeObject(myPublicEvent);
        var confirmed = await js.Confirm($"Are you sure you want to delete {myPublicEvent.Title}?");

        if (confirmed)
        {
            try
            {
                var tokenResult = await AuthenticationService.RequestAccessToken();
                tokenResult.TryGetToken(out var token);
                httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
                var eventId = await httpClient.DeleteAsync($"Api/Events/{myPublicEvent.Id}");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            myEvents = await Http.GetFromJsonAsync<List<PublicEvent>>("Api/Events");
            StateHasChanged();
        }
    }
}